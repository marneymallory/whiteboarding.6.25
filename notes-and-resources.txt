Question #1: Turning Strings to URLs
URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.
You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.
Example
Input: "Jasmine Ann Jones"
Output: "Jasmine%20Ann%20Jones"
Thoughts:
To tackle this problem, I will have to loop through the string (using forEach or recursion) and implement a method that targets the spaces between words and replaces them with %20.
Since I cannot use regular expressions, I will have to find an alternative method that will target the “ “ in between words.
With a branching statement, I will be able to target the space and replace it with %20 after each loop. 
I’m trying to figure out if I need to split the words up independently, add the %20 after each word, and then push it back together. Alternatively, there might be a way I can keep the string whole, and just target the space without breaking up my string. 
I am struggling to think of a way to not use .replace() or .split() methods to solve this problem.
Notes/Solutions:
https://stackoverflow.com/questions/3794919/replace-all-spaces-in-a-string-with (last solution recursion)
 
Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.
Example
Input: [7, 9, "hi", 12, "hi" 7, 53]
Output: [7, 9, "hi", 12, 53]
Thoughts:
My first thought for this problem is you would have to use a for loop that would take in each index of an array.
I feel like I would also need a conditional statement that would parse out whether or not there is a duplicate. 
After researching, I discovered I can also use a Set to remove duplicates from an array. I feel like this will be the best course of action because it will allow me to solve in just two lines and seems like the cleanest solution.
Notes/Solutions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter (solution with filter())
https://www.javascripttutorial.net/array/javascript-remove-duplicates-from-array/ 

Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.
Example
Input: "aaabccdddda"
Output: "3ab2c4da"
Thoughts:
I would have to pass in the string of numbers and use a for loop to count the amount of times a letter is repeated.
I set a value for the length of the string and then write a for loop that will set the index to 0 and create a conditional. lf the string length is less than the index, it will count by one.
Within the for loop, I could implement a while loop that would count the occurrences of each character, counting the amount of time each letter is listed in a row, and thus compressing it into a number and letter combination. 
 
 
function compressString(str)
{
  let n = str.length;
  for (let i = 0; i < n; i++)
    {
    let count = 1;
    while (i < n - 1 && str[1] == str[i+1])
    {
  count++;
  i++;
    }
	}
}
Notes/Solutions
https://www.geeksforgeeks.org/run-length-encoding/ 

Question #4: Checking for Uniqueness
Write an algorithm that determines whether all the elements in a string are unique. You may not convert the string into an array or use array methods to solve this problem. The algorithm should return a boolean.
Example
Input: "hello"
Output: false
Input: "copyright"
Output: true
Thoughts:
To make this work, I will have to write a method that would evaluate the uniqueness of each word in a string and return a true or false statement based on the input. 
I will write two for loops, checking to see if the second is the same as the first. 
If all elements are unique, will return true. 
Notes/Solutions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes 
https://www.w3schools.com/jsref/jsref_includes.asp 
Question #5: Array Sorting
Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms - take the time to read about the following:
Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort
You may implement any of the above algorithms (or your own) to solve the problem - as long as it doesn't use sort().
Example
Input: [9, 2, 7, 12]
Output: [2, 7, 9, 12]
Thoughts:
In order to solve this problem, I need to instantiate two different arrays; one with my original order of numbers and one to put my numbers in once they are sorted from smallest to largest.
I would first create a forEach loop that would iterate through my first array, taking element and index as arguments. 
Then I would create a conditional statement that would push the first element of array1 into array2.
I will create a second forEach loop taking element and index of array2 as arguments.
Then create a second conditional statement saying if the element of array1 is less than or equal to the element in array2, the splice() method will insert the value index.
If element is not less than or equal to the current element, I will use .push() to move element to the end of array 2. 




Notes/Solutions:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push




 
 
 

